generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model enterprise {
  id          String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name        String    @db.VarChar(100)
  description String
  created_at  DateTime? @default(now()) @db.Timestamp(6)
  sector      sector[]
  users       users[]

  tasks tasks[] @relation(map: "fk_task_enterprise")
}

model flyway_schema_history {
  installed_rank Int      @id(map: "flyway_schema_history_pk")
  version        String?  @db.VarChar(50)
  description    String   @db.VarChar(200)
  type           String   @db.VarChar(20)
  script         String   @db.VarChar(1000)
  checksum       Int?
  installed_by   String   @db.VarChar(100)
  installed_on   DateTime @default(now()) @db.Timestamp(6)
  execution_time Int
  success        Boolean

  @@index([success], map: "flyway_schema_history_s_idx")
}

model logs {
  id         String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  user_id    String?   @db.Uuid
  action     String    @db.VarChar(100)
  entity     String    @db.VarChar(50)
  entity_id  String?   @db.Uuid
  new_value  String?
  created_at DateTime? @default(now()) @db.Timestamp(6)
  users      users?    @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_log_user")

  @@index([user_id, action], map: "idx_logs_user_action")
}

model sector {
  id            String       @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name          String       @db.VarChar(100)
  enterprise_id String       @db.Uuid
  enterprise    enterprise   @relation(fields: [enterprise_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_sector_enterprise")
  sub_sector    sub_sector[]
}

model sub_sector {
  id              String            @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name            String            @db.VarChar(100)
  sector_id       String            @db.Uuid
  sector          sector            @relation(fields: [sector_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_sub_sector_sector")
  task_sub_sector task_sub_sector[]
  users           users[]
}

model task_members {
  id      String @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  task_id String @db.Uuid
  user_id String @db.Uuid
  tasks   tasks  @relation(fields: [task_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_task_member_task")
  users   users  @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_task_member_user")

  @@unique([task_id, user_id], map: "uq_task_members")
  @@index([user_id], map: "idx_task_members_user")
}

model task_sub_sector {
  id            String     @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  task_id       String     @db.Uuid
  sub_sector_id String     @db.Uuid
  sub_sector    sub_sector @relation(fields: [sub_sector_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_task_sub_sector_sub_sector")
  tasks         tasks      @relation(fields: [task_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_task_sub_sector_task")

  @@unique([task_id, sub_sector_id], map: "uq_task_sub_sector")
  @@index([sub_sector_id], map: "idx_task_sub_sector_sub")
}

model tasks {
  id              String            @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  title           String            @db.VarChar(255)
  description     String
  status          String            @db.VarChar(50)
  created_at      DateTime?         @default(now()) @db.Timestamp(6)
  updated_at      DateTime?         @db.Timestamp(6)
  finished_at     DateTime?         @db.Timestamp(6)
  task_members    task_members[]
  task_sub_sector task_sub_sector[]

  enterprise_id String     @db.Uuid
  enterprise    enterprise @relation(fields: [enterprise_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_task_enterprise")

  @@index([status], map: "idx_task_status")
}

model users {
  id            String         @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name          String         @db.VarChar(100)
  password      String         @db.VarChar(100)
  email         String         @unique @db.VarChar(100)
  type          String?        @db.VarChar(10)
  enterprise_id String?        @db.Uuid
  sub_sector_id String?        @db.Uuid
  created_at    DateTime?      @default(now()) @db.Timestamp(6)
  updated_at    DateTime?      @db.Timestamp(6)
  logs          logs[]
  task_members  task_members[]
  enterprise    enterprise?    @relation(fields: [enterprise_id], references: [id], onUpdate: NoAction, map: "fk_user_enterprise")
  sub_sector    sub_sector?    @relation(fields: [sub_sector_id], references: [id], onUpdate: NoAction, map: "fk_user_sub_sector")
}
